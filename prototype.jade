doctype html
html
  head
    title gist-gemini-fancy prototype
    style.
      html, body {
        height: 100%;
      }

      body {
        margin: 0;
        /* https://github.com/corysimmons/typographic/blob/2.9.3/scss/typographic.scss#L34 */
        font-family: 'Helvetica Neue', 'Helvetica', 'Arial', 'sans-serif';
      }
  body
    h1 gist-gemini-fancy prototype
    //- Load an images directly from our report
    //- img(src="gemini-report/images/root/default-large/Chrome~current.png")
    img(src="gemini-report/images/root/default-large/Chrome~diff.png")
    //- img(src="gemini-report/images/root/default-large/Chrome~ref.png")

    //- Load in our dependencies for `unidragger`
    script(src="https://cdn.rawgit.com/metafizzy/ev-emitter/v1.0.3/ev-emitter.js")
    script(src="https://cdn.rawgit.com/metafizzy/unipointer/v2.1.0/unipointer.js")
    script(src="https://cdn.rawgit.com/metafizzy/unidragger/v2.1.0/unidragger.js")

    //- Integrate HTML/CSS overlay for selection
    script.
      document.addEventListener('DOMContentLoaded', function handleReady () {
        // Find our image
        var imgEl = document.querySelector('img');

        // Define our overlay class
        function Overlay(targetEl) {
          // Bind our overlay to the element
          this.handles = [targetEl];
          this.bindHandles();
        }
        // Inherit prototype from Unidragger
        Overlay.prototype = Object.create(Unidragger.prototype);
        Overlay.prototype.dragStart = function (evt, pointer) {
          // If we don't have an overlay element, create one now
          if (!this.overlayEl) {
            this.overlayEl = document.createElement('div');
            this.overlayEl.style.cssText = [
              'position: absolute',
              'width: 50px',
              'height: 50px',
              'background: #33CC33',
              'border: 2px solid #00FF00',
              'opacity: 0.5',
            ].join(';');
            document.body.appendChild(this.overlayEl);
          }
        };
        Overlay.prototype.dragMove = function(evt, pointer, moveVector) {
          var dragX = this.dragStartPoint.x + moveVector.x;
          var dragY = this.dragStartPoint.y + moveVector.y;
          this.overlayEl.style.left = dragX + 'px';
          this.overlayEl.style.top = dragY + 'px';

          // TODO: Figure out why mouse isn't always at top right of overlay...
          //   Prob can see what `mockdesk` does...
          // TODO: Restrict overlay element to boundaries of original element
        };

        // Make image draggable
        // TODO: Make overlay which is bound to edges of img
        void new Overlay(imgEl);

        // TODO: Fake drag move...
        //- https://github.com/twolfson/mockdesk/blob/0.14.2/lib/js/scripts/drag-rectangle.js
      });
